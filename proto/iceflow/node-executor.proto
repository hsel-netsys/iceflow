/*
 * Copyright 2024 The IceFlow Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package iceflow;

service NodeExecutor {
  /// Sends a report about a congestion on an edge within the Iceflow system
  /// to the NodeExecutor.
  rpc ReportCongestion(CongestionReportRequest)
      returns (CongestionReportResponse);
}

message CongestionReportRequest {
  /// The specifier of the congested edge.
  string edge_name = 1;

  /// An identifier of the cause for the congestion.
  CongestionReason congestion_reason = 2;
  // TODO: Should the amount of congestion be quantified somehow?
}

message CongestionReportResponse {}

/// Enumeration of reasons why a NodeInstance can become congested.
enum CongestionReason {
  /// The congestion is caused by insufficient network capacity, reported via
  /// congestion marks attached to NDN messages.
  CONGESTION_REASON_NETWORK = 0;

  /// The congestion is caused by insufficient computing resources, causing the
  /// producer's queue to fill up.
  CONGESTION_REASON_PROCESSING = 1;
}
